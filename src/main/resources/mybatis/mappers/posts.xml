<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.PostMapper">
	
	<insert id="insertPost" parameterType="com.example.vo.post.Post">
		insert into posts
			(post_no, employee_no, post_title, post_content)
		values
			(#{no}, #{employeeNo}, #{title}, #{content})
	</insert>
	
	<insert id="insertTags" parameterType="java.util.List">
	    insert all 
	    <foreach item="tag" collection="list">
	        into post_tags 
	        	(post_no, tag_content) 
	        values 
	        	(#{tag.postNo}, #{tag.content})
	    </foreach>
	    select 1 from dual
	</insert>
	
	<insert id="insertAttachedFiles" parameterType="java.util.List">
		insert all
		<foreach item="attachedFile" collection="list">
			into post_attached_files
				(post_no, post_original_filename, post_saved_filename)
			values
				(#{attachedFile.postNo}, #{attachedFile.originalName}, #{attachedFile.savedName})
		</foreach>
		select 1 from dual
	</insert>
	
	<insert id="insertComment" parameterType="com.example.vo.post.Comment">
		insert into post_comments
			(COMMENT_NO, EMPLOYEE_NO, POST_NO, COMMENT_CONTENT)
		values
			(#{no}, #{employeeNo}, #{postNo}, #{content})
	</insert>
	
	<insert id="insertPostScrap">
		insert into post_scraps
			(post_no, employee_no)
		values
			(#{postNo}, #{employeeNo})
	</insert>
	
	<insert id="insertPostRecommend">
		insert into post_recommends
			(post_no, employee_no)
		values
			(#{postNo}, #{employeeNo})
	</insert>
	
	<insert id="insertCommentRecommend">
		insert into post_comment_recommends
			(comment_no, employee_no)
		values
			(#{commentNo}, #{employeeNo})
	</insert>
	
	<select id="selectPostSequence" resultType="int">
		select posts_seq.nextval
		from dual
	</select>
	
	<select id="selectTotalRows" resultType="int">
		select
			count(*)
		from
			posts
		<where>
			<choose>
				<when test="opt.type == 'title'">
					post_title like '%' || #{opt.keyword} || '%'
				</when>
				<when test="opt.type == 'content'">
					(post_content like '%' || #{opt.keyword} || '%'
					 or post_title like '%' || #{opt.keyword} || '%')
				</when>
				<when test="opt.type == 'name'">
					employee_no in (select
										employee_no
									from
										employees
									where
										employee_name = #{opt.keyword})	
				</when>
			</choose>
			<if test="opt.employeeNo != 0">
				and employee_no = #{opt.employeeNo}
			</if>
			and post_deleted = #{opt.deleted}
		</where>
	</select>
	
	<select id="selectPostListDtos" resultType="com.example.dto.post.PostListDto">
		select
		    post_no 				as no,
		    employee_name 			as name,
		    post_title 				as title,
		    post_content			as content,
		    post_read_count 		as readCount,
		    post_comment_count		as commentCount,
		    post_recommend_count 	as recommendCount,
		    post_created_date 		as createdDateTime,
		    post_has_file 			as hasAttachedFile
		from (
		     select
		     	 <choose>
		     	 	<when test="opt.sort == 'date'">
						 row_number() over (order by A.post_created_date desc) row_numbers,
		     	 	</when>
		     	 	<when test="opt.sort == 'recommend'">
						 row_number() over (order by A.post_recommend_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="opt.sort == 'read'">
						 row_number() over (order by A.post_read_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="opt.sort == 'comment'">
						 row_number() over (order by A.post_comment_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="opt.sort == 'scrap'">
						 row_number() over (order by A.post_scrap_count desc) row_numbers,
		     	 	</when>
		     	 </choose>
		         A.post_no,
		         B.employee_name,
		         A.post_title,
		         A.post_content,
		         A.post_recommend_count,
		         A.post_read_count,
		         A.post_comment_count,
		         A.post_scrap_count,
		         A.post_created_date,
		         nvl((select distinct 'true' from post_attached_files where post_no = A.post_no), 'false') as post_has_file
		     from
		         posts A, employees B
		     <where>
		     	<choose>
		     		<when test="opt.type == 'title'">
		     			A.post_title like '%' || #{opt.keyword} || '%'
		     		</when>
		     		<when test="opt.type == 'content'">
		     			(A.post_content like '%' || #{opt.keyword} || '%'
		     			 or A.post_title like '%' || #{opt.keyword} || '%')
		     		</when>
		     		<when test="opt.type == 'name'">
		     			B.employee_name like '%' || #{opt.keyword} || '%'
		     		</when>
		     	</choose>
		     	<if test="opt.employeeNo != 0">
		     		and A.employee_no = #{opt.employeeNo}
		     	</if>
		         and A.post_deleted = #{opt.deleted}
		         and A.employee_no = B.employee_no
		     </where>
		     )
		where
		    row_numbers between #{begin} and #{end}
	</select>
	
	<select id="selectTotalRowsWithMyComment" resultType="int">
		select
			count(*)
		from
			posts A, post_comments B
		where
		    A.post_no = B.post_no 
		    and B.comment_content like '%' || #{opt.keyword} || '%'
		    and B.employee_no = #{opt.employeeNo}
		    and A.post_deleted = 'N'
	</select>
	
	<select id="selectPostListDtosWithMyComment" resultType="com.example.dto.post.PostListDtoWithMyComment">
		select
			post_no					as no,
		    post_title 				as title,
		    comment_content 		as commentContent,
		    comment_created_date 	as commentCreatedDateTime
		from (
              	select
                    row_number() over (order by B.comment_created_date desc) row_numbers,
                    A.post_no,
                    A.post_title,
                    B.comment_content,
                    B.comment_created_date
                from
                    posts A, post_comments B
                where
                    A.post_no = B.post_no 
		    		and B.comment_content like '%' || #{opt.keyword} || '%'
		    		and B.employee_no = #{opt.employeeNo}
		    		and A.post_deleted = 'N'
             )
        where
            row_numbers between #{begin} and #{end}
	</select>	
	
	<select id="selectTotalRowsWithMyScrap" resultType="int">
		select
			count(*)
		from
			posts A, post_scraps B
		where
		    A.post_no = B.post_no 
		    and A.post_content like '%' || #{opt.keyword} || '%'
		    and B.employee_no = #{opt.employeeNo}
		    and A.post_deleted = 'N'
	</select>
	
	<select id="selectPostListDtosWithMyScrap" resultType="com.example.dto.post.PostListDtoWithMyScrap">
		select
			post_no					as no,
		    post_title 				as title,
		    post_content 			as content,
		    scrap_created_date 		as scrapCreatedDateTime
		from (
              	select
                    row_number() over (order by B.scrap_created_date desc) row_numbers,
                    A.post_no,
                    A.post_title,
                    A.post_content,
                    B.scrap_created_date
                from
                    posts A, post_scraps B
                where
                    A.post_no = B.post_no
                    and A.post_content like '%' || #{opt.keyword} || '%'
                    and B.employee_no = #{opt.employeeNo}
                    and A.post_deleted = 'N'
             )
        where
            row_numbers between #{begin} and #{end}	
	</select>
	
	<select id="selectTotalRowsWithNotice" parameterType="int" resultType="int">
		select 
    		count(*)
		from 
    		(select C.employee_name, A.post_title as content, 'postRecommend' as type, A.post_no, B.RECOMMEND_CREATED_DATE as notice_created_date
			from posts A, post_recommends B, employees C
			where A.employee_no = #{opt.employeeNo}
			and A.post_no = B.post_no
			and B.employee_no = C.employee_no
			and B.employee_no not in (#{opt.employeeNo})
			and A.post_deleted = 'N'
			union

			select C.employee_name, A.post_title as content, 'postScrap' as type, A.post_no, B.SCRAP_CREATED_DATE as notice_created_date
			from posts A, post_scraps B, employees C
			where A.employee_no = #{opt.employeeNo}
			and A.post_no = B.post_no
			and B.employee_no = C.employee_no
			and B.employee_no not in (#{opt.employeeNo})
			and A.post_deleted = 'N'
			union
			
			select C.employee_name, B.comment_content as content, 'comment' as type, A.post_no, B.COMMENT_CREATED_DATE as notice_created_date
			from posts A, post_comments B, employees C
			where A.employee_no = #{opt.employeeNo}
			and A.post_no = B.post_no
			and B.employee_no = C.employee_no
			and  B.employee_no not in (#{opt.employeeNo})
			and A.post_deleted = 'N'
			union
			
			select C.employee_name, A.comment_content as content,  'commentRecommend' as type, D.post_no, B.COMMENT_RECOMMEND_CREATED_DATE as notice_created_date
			from post_comments A, post_comment_recommends B, employees C, posts D
			where A.employee_no = #{opt.employeeNo}
			and A.comment_no = B.comment_no
			and B.employee_no = C.employee_no
			and D.post_no = A.post_no
			and B.employee_no not in (#{opt.employeeNo})
			and D.post_deleted = 'N')
	</select>
	
	<select id="selectPostListDtosWithNotice" resultType="com.example.dto.post.PostListDtoWithNotice">
		select
		    employee_name 		as employeeName,
		    content 			as content,
		    type 				as type,
		    post_no 			as postNo,
		    notice_created_date as noticeCreatedDateTime
		from
			(select 
			    row_number() over (order by notice_created_date desc) as row_numbers,
			    employee_name,
			    content,
			    type,
			    post_no,
			    notice_created_date
			from 
		    	(select C.employee_name, A.post_title as content, 'postRecommend' as type, A.post_no, B.RECOMMEND_CREATED_DATE as notice_created_date
				from posts A, post_recommends B, employees C
				where A.employee_no = #{employeeNo}
				and A.post_no = B.post_no
				and B.employee_no = C.employee_no
				and B.employee_no not in (#{employeeNo})
				and A.post_deleted = 'N'
				union
		
				select C.employee_name, A.post_title as content, 'postScrap' as type, A.post_no, B.SCRAP_CREATED_DATE as notice_created_date
				from posts A, post_scraps B, employees C
				where A.employee_no = #{employeeNo}
				and A.post_no = B.post_no
				and B.employee_no = C.employee_no
				and B.employee_no not in (#{employeeNo})
				and A.post_deleted = 'N'
				union
		
				select C.employee_name, B.comment_content as content, 'comment' as type, A.post_no, B.COMMENT_CREATED_DATE as notice_created_date
				from posts A, post_comments B, employees C
				where A.employee_no = #{employeeNo}
				and A.post_no = B.post_no
				and B.employee_no = C.employee_no
				and  B.employee_no not in (#{employeeNo})
				and A.post_deleted = 'N'
				union
		
				select C.employee_name, A.comment_content as content,  'commentRecommend' as type, D.post_no, B.COMMENT_RECOMMEND_CREATED_DATE as notice_created_date
				from post_comments A, post_comment_recommends B, employees C, posts D
				where A.employee_no = #{employeeNo}
				and A.comment_no = B.comment_no
				and B.employee_no = C.employee_no
				and D.post_no = A.post_no
				and B.employee_no not in (#{employeeNo})
				and D.post_deleted = 'N')
			)
			where
		    	row_numbers between #{begin} and #{end}
	</select>
	
	<select id="selectPostDetailDto" resultType="com.example.dto.post.PostDetailDto">
		select
			A.post_no				as no,
			A.employee_no			as employeeNo,
			B.employee_name			as name,
			A.post_title 			as title,
			A.post_content 			as content,
			A.post_read_count 		as readCount,
			A.post_recommend_count 	as recommendCount,
			A.post_scrap_count 		as scrapCount,
			A.post_created_date 	as createdDateTime,
			A.post_deleted			as deleted,
			nvl((select 'true' from post_scraps where employee_no = #{employeeNo} and  post_no = #{postNo} ), 'false') as scrapped ,
			nvl((select 'true' from post_recommends where employee_no = #{employeeNo} and  post_no = #{postNo} ), 'false') as recommended
		from
			posts A, employees B
		where
			A.employee_no = B.employee_no
			and A.post_no	= #{postNo}
	</select>
	
	<select id="selectCommentListDtos" resultType="com.example.dto.post.CommentListDto">
		select
			A.comment_no				as no,
			A.employee_no				as employeeNo,
			B.employee_name				as name,
			A.comment_content			as content,
			A.comment_recommend_count	as recommendCount,
			A.comment_created_date		as createdDateTime,
			nvl((select 'true' from post_comment_recommends where employee_no = #{employeeNo} and  comment_no = A.comment_no ), 'false') as recommended
		from
			post_comments A, employees B
		where
			A.employee_no = B.employee_no
			and A.post_no	= #{postNo}
		order by A.comment_created_date desc	
	</select>
	
	<select id="selectComment" parameterType="int" resultType="com.example.vo.post.Comment">
		select
			COMMENT_NO 					as no,
			EMPLOYEE_NO 				as employeeNo,
			POST_NO						as postNo,
			COMMENT_CONTENT 			as content,
			COMMENT_RECOMMEND_COUNT 	as recommendCount,
			COMMENT_CREATED_DATE 		as createdDate,
			COMMENT_UPDATED_DATE 		as updatedDate
		from
			post_comments
		where
			comment_no = #{value}
	</select>
	
	<select id="selectCommentSequence" resultType="int">
		select post_comments_seq.nextval
		from dual
	</select>		
	
	<select id="selectCommentListDto" resultType="com.example.dto.post.CommentListDto">
		select
			A.comment_no				as no,
			A.employee_no				as employeeNo,
			B.employee_name				as name,
			A.comment_content			as content,
			A.comment_recommend_count	as recommendCount,
			A.comment_created_date		as createdDate,
			nvl((select 'true' from post_comment_recommends where comment_no = #{commentNo} and employee_no = #{employeeNo}), 'false') as recommended
		from
			post_comments A, employees B
		where
			A.employee_no = B.employee_no
			and A.comment_no = #{commentNo}
	</select>
	
	<select id="selectAttachedFiles" parameterType="int" resultType="com.example.vo.post.AttachedFile">
		select
			POST_NO					as postNo,
			POST_SAVED_FILENAME 	as savedName,
			POST_ORIGINAL_FILENAME	as originalName
		from
			POST_ATTACHED_FILES
		where
			post_no = #{value}
	</select>
	
	<select id="selectTags" parameterType="int" resultType="com.example.vo.post.Tag">
		select
			post_no		as postNo,
			tag_content	as content
		from
			post_tags
		where
			post_no = #{value}	
	</select>
	
	<select id="selectPost" parameterType="int" resultType="com.example.vo.post.Post">
		select
			 post_no 				as no,
			 employee_no 			as employeeNo,
			 post_title 			as title,
			 post_content 			as content,
			 post_read_count 		as readCount,
			 post_recommend_count 	as recommendCount,
			 post_comment_count 	as commentCount,
			 post_scrap_count 		as scrapCount,
			 post_deleted 			as deleted,
			 post_created_date 		as createdDate,
			 post_updated_date 		as updatedDate
		from
			posts
		where
			post_no = #{value}
	</select>
	
	<select id="selectPosts" parameterType="java.util.List" resultType="com.example.vo.post.Post">
		select
			post_no 				as no,
			employee_no 			as employeeNo,
			post_title 				as title,
			post_content 			as content,
			post_read_count 		as readCount,
			post_recommend_count 	as recommendCount,
			post_comment_count 	as commentCount,
			post_scrap_count 		as scrapCount,
			post_deleted 			as deleted,
			post_created_date 		as createdDate,
			post_updated_date 		as updatedDate		
		from
			posts
		where post_no in
		<foreach item="postNo" collection="list" open="(" separator="," close=")">
			#{postNo}
		</foreach>
	</select>

	<select id="getEmpRolesByEmployeeNo" parameterType="int" resultType="String">
		select
			employee_role_name		as roleName
		from
			employee_roles
		where
			employee_no = #{value}
	</select>

	<update id="updatePost" parameterType="com.example.vo.post.Post">
		update
			posts
		set
			post_title 				= #{title},
			post_content 			= #{content},
			post_read_count 		= #{readCount},
			post_recommend_count 	= #{recommendCount},
			post_comment_count 		= #{commentCount},
			post_scrap_count 		= #{scrapCount},
			post_deleted 			= #{deleted},
			post_updated_date 		= sysdate
		where
			post_no = #{no}
	</update>
	
	<update id="updatePosts" parameterType="java.util.List">
		<foreach collection="list" item="post" separator=";" open="DECLARE BEGIN" close="; END;">
			update
				posts
			set
				post_title 				= #{post.title},
				post_content 			= #{post.content},
				post_read_count 		= #{post.readCount},
				post_recommend_count 	= #{post.recommendCount},
				post_comment_count 		= #{post.commentCount},
				post_scrap_count 		= #{post.scrapCount},
				post_deleted 			= #{post.deleted},
				post_updated_date 		= sysdate
			where 
				post_no = #{post.no}
		</foreach>
	</update>
	
	<update id="updateComment" parameterType="com.example.vo.post.Comment">
		update
			post_comments
		set
			comment_content = #{content},
			comment_recommend_count = #{recommendCount},
			comment_updated_date = sysdate
		where
			comment_no = #{no}
	</update>
	
	<delete id="deletePosts" parameterType="java.util.List">
		delete from
			posts
		where
			post_no in
		<foreach collection="list" item="no" open="(" separator="," close=")">
			#{no}
		</foreach>
	</delete>
	
	<delete id="deletePostScrap">
		delete from
			post_scraps
		where
			post_no = #{postNo}
			and employee_no = #{employeeNo}
	</delete>
	
	<delete id="deletePostRecommend">
		delete from
			post_recommends
		where
			post_no = #{postNo}
			and employee_no = #{employeeNo}
	</delete>
	
	<delete id="deleteCommentRecommend">
		delete from
			post_comment_recommends
		where
			comment_no = #{commentNo}
			and employee_no = #{employeeNo}
	</delete>
	
	<delete id="deleteFiles" parameterType="java.util.List">
		delete from
			post_attached_files
		where
	    	<foreach item="name" collection="list" separator="or">
			post_saved_filename = #{name}
			</foreach>
	</delete>
	
  	<delete id="deleteTags" parameterType="java.util.List">
		delete from 
			post_tags
		where
	    	<foreach item="item" collection="list" separator="or">
		    tag_content = #{item}
	    	</foreach>
  	</delete>
	
	<delete id="deleteComment" parameterType="int">
		delete from
			post_comments
		where
			comment_no = #{value}
	</delete>
	
</mapper>